import { useContext, useState } from "react";
import { AuthContext } from "../Shared_Context/AuthProvider";
import { Line } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";
import DataTable from "./DataTable";
import StatsCard from "./StatsCard";

ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);

export default function MainContent() {
  const { user } = useContext(AuthContext);
  const [zoomPoint, setZoomPoint] = useState(null);

  const recentActivities = [
    { id: 1, action: "User John Smith updated profile", time: "2 hours ago" },
    { id: 2, action: "New order #1234 placed", time: "4 hours ago" },
    { id: 3, action: "Report generated by Jane Doe", time: "Yesterday" },
  ];

  const chartData = {
    labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun"],
    datasets: [
      {
        label: "User Growth",
        data: [65, 59, 80, 81, 56, 55],
        borderColor: "#3b82f6",
        backgroundColor: "rgba(59, 130, 246, 0.3)",
        fill: true,
        tension: 0.4,
        pointBackgroundColor: "#ffffff",
        pointBorderColor: "#3b82f6",
        pointRadius: 6,
        pointHoverRadius: 10,
        pointHoverBackgroundColor: "#ffffff",
        pointHoverBorderColor: "#3b82f6",
        pointHoverBorderWidth: 3,
      },
    ],
  };

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        labels: {
          color: "#ffffff",
          font: { size: 14 },
        },
      },
      tooltip: {
        backgroundColor: "rgba(0, 0, 0, 0.9)",
        titleColor: "#ffffff",
        bodyColor: "#ffffff",
        padding: 12,
        cornerRadius: 8,
      },
    },
    scales: {
      x: {
        ticks: { color: "#ffffff", font: { size: 12 } },
        grid: { color: "rgba(255, 255, 255, 0.1)" },
      },
      y: {
        ticks: { color: "#ffffff", font: { size: 12 } },
        grid: { color: "rgba(255, 255, 255, 0.1)" },
        min: zoomPoint ? zoomPoint - 10 : 0,
        max: zoomPoint ? zoomPoint + 10 : 100,
      },
    },
    animation: {
      duration: 2000,
      easing: "easeOutBounce",
      delay: (context) => context.dataIndex * 150,
      y: {
        type: "number",
        from: (context) => context.dataset.data[context.index] - 30,
      },
      opacity: {
        from: 0,
        to: 1,
      },
      scale: {
        from: 0,
        to: 1,
      },
      rotate: {
        from: 0,
        to: 360,
        duration: 1000,
      },
    },
    onHover: (event, elements) => {
      if (elements.length) {
        event.native.target.style.cursor = "pointer";
      } else {
        event.native.target.style.cursor = "default";
      }
    },
    onClick: (event, elements) => {
      if (elements.length) {
        const dataIndex = elements[0].index;
        const value = chartData.datasets[0].data[dataIndex];
        setZoomPoint(zoomPoint === value ? null : value);
      }
    },
    elements: {
      point: {
        pointStyle: "circle",
        hoverRadius: (context) => (context.active ? 12 : 10),
        rotation: (context) => (context.active ? 180 : 0),
      },
    },
  };

  return (
    <main className="flex-1 p-4 sm:p-6 overflow-y-auto bg-black bg-opacity-50">
      {/* Welcome Banner */}
      <div className="mb-6 bg-black bg-opacity-80 rounded-xl shadow-lg p-6 text-center sm:text-left animate-fade-in">
        <h2 className="text-2xl font-semibold text-white tracking-tight">
          Welcome, {user?.displayName || "Guest"}!
        </h2>
        <p className="mt-2 text-white text-opacity-80">
          Here&#39;s a quick overview of your dashboard. Explore key metrics and recent activities below.
        </p>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-6">
        <StatsCard
          title="Total Users"
          value="1,234"
          change="+5%"
          opacity="20"
          icon="M12 4.5v15m7.5-7.5h-15"
        />
        <StatsCard
          title="Revenue"
          value="$12,345"
          change="+10%"
          opacity="25"
          icon="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c-2.209 0-4 1.791-4 4s1.791 4 4 4 4-1.791 4-4-1.791-4-4-4zm0 12c-2.209 0-4 1.791-4 4s1.791 4 4 4 4-1.791 4-4-1.791-4-4-4z"
        />
        <StatsCard
          title="Orders"
          value="567"
          change="-2%"
          opacity="15"
          icon="M3 3h18v18H3V3zm2 2v14h14V5H5z"
        />
        <StatsCard
          title="Active Sessions"
          value="89"
          change="+3%"
          opacity="30"
          icon="M12 4.5c-4.418 0-8 3.582-8 8s3.582 8 8 8 8-3.582 8-8-3.582-8-8-8zm0 14c-3.313 0-6-2.687-6-6s2.687-6 6-6 6 2.687 6 6-2.687 6-6 6z"
        />
      </div>

      {/* Chart Section */}
      <div className="mb-6 bg-black bg-opacity-80 rounded-xl shadow-lg p-6 animate-slide-up">
        <h3 className="text-lg font-medium text-white mb-4">User Growth</h3>
        <div className="h-64 relative">
          <Line data={chartData} options={chartOptions} />
          {zoomPoint && (
            <button
              onClick={() => setZoomPoint(null)}
              className="absolute top-4 right-4 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors duration-200"
            >
              Reset Zoom
            </button>
          )}
        </div>
      </div>

      {/* Recent Activity Feed */}
      <div className="mb-6 bg-black bg-opacity-80 rounded-xl shadow-lg p-6 animate-slide-up">
        <h3 className="text-lg font-medium text-white mb-4">Recent Activity</h3>
        <ul className="space-y-4">
          {recentActivities.map((activity) => (
            <li
              key={activity.id}
              className="flex items-center gap-4 p-3 bg-black bg-opacity-50 rounded-lg hover:bg-opacity-70 transition-colors duration-200"
            >
              <svg
                className="w-5 h-5 text-white text-opacity-80"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M8 7h12m0 0l-4-4m4 4l-4 4m-12 1h12m-12 4h12m-12 4h12"
                />
              </svg>
              <div className="flex-1">
                <p className="text-white text-opacity-90">{activity.action}</p>
                <p className="text-sm text-white text-opacity-60">{activity.time}</p>
              </div>
            </li>
          ))}
        </ul>
      </div>

      {/* Data Table */}
      <DataTable />
    </main>
  );
}